<div class="container-fluid">
	<div class="row">

		<div class="col-md-5">
      <div style='width: 700px;'>
        <div id="map" style='width: 550px; height: 700px;'></div>
      </div>
    </div>


		<div class="col-md-7">
			<!--<h3>場所を追加しましょう！</h3>-->
			<%= form_for @place, url: add_plans_path, method: "post" do |f| %>
				<% if @place.errors.any? %>
					<div id="error_explanation">
						<h2><%= pluralize(@place.errors.count, "error") %> prohibited this place from being saved:</h2>
						<ul>
						<% @place.errors.full_messages.each do |message| %>
							<li><%= message %></li>
						<% end %>
						</ul>
					</div>
				<% end %>

				<div class="field">
					<%= f.hidden_field :user_id, value: current_user.id  %>
				</div>
				<div class="field">
					<%= f.hidden_field :plan_id, value: @plan.id %>
				</div>
				<div class="field">
					<%= f.hidden_field :latitude %>
				</div>
				<div class="field">
					<%= f.hidden_field :longitude %>
				</div>
				<div class="field">
					<%= f.hidden_field :route %>
				</div>
				<div class="form-inline">
				<div class='input-group'>
					<span class="input-group-addon">場所・住所</span>
	        <%= f.text_field :address, class: 'form-control' %>
				</div>

					<%= f.fields_for :pins do |c| %>
	        <!--  <div class='input-group'>
							<span class="input-group-addon">コメント（任意）</span>
	            <%= c.text_field :comment, class: 'form-control' %>
	          </div> -->
	          <div class='input-group'>
	            <span class="input-group-addon">優先度</span>
								<div class = "form-control">
									<%= c.radio_button :want, 2 %>高
									<%= c.radio_button :want, 1, :checked => "checked" %>中
									<%= c.radio_button :want, 0 %>低
								</div>
	          </div>
					<% end %>
				<div class='input-group'>
				<div class="actions">
					<%= f.submit value: "追加", class: 'btn btn-primary'%>
				</div>
				</div>
			</div>

			<% end %>

		レストラン検索
		<input type="text" placeholder="enter your access key here" class="js--key"><input type="button" value="レストラン検索" class="js--apply" />
		レストラン検索


		<!-- モーダルウィンドウを呼び出すボタン -->
		<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#myModal">食事スポットを検索</button>
		<%= link_to 'レストランモーダル', modal_restaurant_plans_path, method: "get", remote: true %>


		<!-- モーダルウィンドウの中身 -->
		<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-hidden="true">
			<!--<%= render partial: 'modal' %>-->
		</div>


      <table class = "table">
      <thead>
        <tr>
        <th>順番</th>
        <th>登録者</th>
        <th>場所</th>
				<th>action</th>
				<th>FROM</th>
				<th>TO</th>
				<th>時間(距離)</th>
        <!-- 緯度・経度は表示しない<th>緯度</th>-->
        <!-- 緯度・経度は表示しない<th>経度</th>-->
        <tr>
      </thead>
      <tbody id="sortable"><%i = 0%>
        <% @places.each do |place| %>
        <tr id="<%= place.id %>">
          <td class = "route"><%= place.route %></td>
          <td><%= place.user.name %></td>
          <td><%= place.address %></td>
          <!-- 緯度・経度は表示しない<td><%= place.latitude %></td>-->
          <!-- 緯度・経度は表示しない<td><%= place.longitude %></td>-->
					<td><%= link_to '削除', place, method: :delete, data: { confirm: 'Are you sure?' } %></td>

				<%= form_for place, url: datetime_plans_path, method: "post", remote: true do |f| %>
					<td><div class='input-group date startdatetimepicker'>
						<%= f.text_field :from, class: 'form-control testid' %>
						<span class="input-group-addon">
					</div></td>
					<td><div class='input-group date enddatetimepicker'>
						<%= f.text_field :to, class: 'form-control testid' %>
						<span class="input-group-addon">
					</div></td>
					<td><div>
						<%= f.hidden_field :id, value: place.id %>
					</div></td>
					<td>
						<!--<div class="actions">
							<%= f.submit class: 'btn btn-primary', value: "更新" %>
						</div>-->
						<div class = "hidden_number">
							<div id ="<%= i%>"></div></div>
					</td>
				<% end %>
        </tr>
        <%i = i + 1%><% end %>
      </tbody>
      </table>
			ドラッグ＆ドロップで経路を変更することで、移動時間/経路が自動で算出されます。<br>
			入力された情報はブラウザを閉じても保存されます。<br><br>
			<!--<button type="button" id = "create_routes" class = 'btn btn-primary'>直線を引く</button>
			<button type="button" id = "create_routes_time" class = 'btn btn-primary'>経路作成</button>-->
			<%= link_to 'この経路で決定', confirm_plan_path(@plan), id: "confirm", class: 'btn btn-primary', style: 'color:white' %>
    </div>
	</div>
</div>

<!--ここにdistanceの結果を描画する
<div id="directions-result" style="width:600px; height:1000px"></div>
ここにdistanceの結果を描画する-->




<script type="text/javascript">
	//alert("ハンドラーの前");
  handler = Gmaps.build('Google');
  defo = new google.maps.LatLng( 39.0686606 , 141.3507552 );
  handler.buildMap({ provider: {}, internal: {id: 'map'}}, function(){
		//			alert("実行後");
    markers = handler.addMarkers(<%=raw @hash.to_json %>);
    handler.bounds.extendWith(markers);
    handler.fitMapToBounds();
    handler.getMap().setZoom(5);
    handler.map.centerOn(defo);
  });

// 場所を線で結ぶメソッド（直線）
	polylines = [];
 	document.getElementById( 'create_routes' ).onclick = function( e ){
   /* 関係ない動作を無効化 */
   var e = e || window.event ;
   e.preventDefault() ;
   e.stopPropagation() ;

 	poli = [];
 	point = <%= @point %>;
 	alert(point.length);
  for (var i = 0; i < point.length; i++) {
		//alert(point[i][1]);
		//alert(point[i][0]);
		//alert(i);
  	poli.push(new google.maps.LatLng( point[i][0], point[i][1] ));
	};

 // var flightPlanCoordinates = [
 // 	new google.maps.LatLng( 35.5, 134.25 ) ,
 //  new google.maps.LatLng( 35.4, 133.31 )
 // ];

// alert("固定");
// alert(flightPlanCoordinates);
		alert("可変");
		alert(poli);
     //1つ目の線(Polyline)のインスタンスを作成する
     //new google.maps.Polyline() ]の引数にオプションオブジェクトを指定する
		 //固定で線を引くことはできる

   polylines[0] = new google.maps.Polyline( {
   	map: handler.getMap() ,
   	path:
			poli,
			strokeColor: '#FF0000' //色（#RRGGBB形式）
   } ) ;
 };


 //場所を線で結ぶ処理（道に沿った線。時間も算出できる）
 rendererOptions = {
 draggable: true,
 preserveViewport: false,
 suppressMarkers: true
 };
 var directionsDisplay =
   new google.maps.DirectionsRenderer(rendererOptions);
 var directionsService =
   new google.maps.DirectionsService();



 var wayPoints = [];
 //経路（道に沿った）や時間を算出する
 document.getElementById( 'create_routes_time' ).onclick = function( e ){
  directionsDisplay.setMap(handler.getMap());
//	alert("始まるよ");
  google.maps.event.addListener(directionsDisplay,
    'directions_changed', function(){
  });
 //経由ポイント@始点と終点を除く
 poli = [];
 point = <%= @point %>;
 //alert(point.length);
	for (var i = 0; i < point.length; i++) {
 //alert(point[i][1]);
 //alert(point[i][0]);
 //alert(i);
	poli.push(new google.maps.LatLng( point[i][0], point[i][1] ));
};
//alert("可変");
		alert(poli);
  for (var i = 1; i < poli.length-1; i++) {
      wayPoints.push({
        location: poli[i],
        stopover: true
      });
  }
//	alert("ここは？");
  calcRoute();
 }



 function calcRoute() {
  var request = {
  origin: poli[0],
  destination: poli[poli.length-1],
  travelMode: google.maps.DirectionsTravelMode.DRIVING,
  unitSystem: google.maps.DirectionsUnitSystem.METRIC,
  waypoints: wayPoints,
  optimizeWaypoints: false,
  avoidHighways: false,
  avoidTolls: false
  };

	//alert("きてる？");
  directionsDisplay.setPanel(document.getElementById('directions-result'));
  directionsService.route(request,
   function(response,status){
   if (status == google.maps.DirectionsStatus.OK){
	//	 alert("最短」毛jロイ");
	//	 alert(response.routes[0].waypoint_order);
	$('.hidden_number').text("");
		 for (var i = 0; i < response.routes[0].legs.length; i++) {
			$("#" + i).text("⬇︎" + Math.floor( response.routes[0].legs[i].duration.value / 60) + "分" + "(" + Math.floor(response.routes[0].legs[i].distance.value / 1000 )+ "Km)" );
		 	};
	//	alert("第一地点と第二地点の距離は" + response.routes[0].legs[0].distance.value / 1000 + "キロメートルあります");
	//	alert("第一地点と第二地点の時間は" + response.routes[0].legs[0].duration.value / 60 + "分かかります");
	//	alert(response.routes[0].legs[1]);
   directionsDisplay.setDirections(response);}
	 alert(status);
   });
 }
</script>
